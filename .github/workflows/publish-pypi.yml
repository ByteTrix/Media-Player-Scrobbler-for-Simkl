name: Publish to PyPI

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
    secrets:
      SIMKL_CLIENT_ID:
        required: true
      SIMKL_CLIENT_SECRET:
        required: true
      PYPI_API_TOKEN:
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for PyPI trusted publishing
      contents: write  # Required for creating releases
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry and dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.create false
          poetry install

      - name: Set version in pyproject.toml
        run: poetry version ${{ inputs.version }}

      # This step injects the secrets directly into the credentials.py file
      - name: Inject Simkl Credentials into Code
        env:
          SIMKL_CLIENT_ID: ${{ secrets.SIMKL_CLIENT_ID }}
          SIMKL_CLIENT_SECRET: ${{ secrets.SIMKL_CLIENT_SECRET }}
        run: |
          # Check if secrets are available
          if [ -z "$SIMKL_CLIENT_ID" ]; then
            echo "::error::SIMKL_CLIENT_ID secret is not set."
            exit 1
          fi
          if [ -z "$SIMKL_CLIENT_SECRET" ]; then
            echo "::error::SIMKL_CLIENT_SECRET secret is not set."
            exit 1
          fi

          # Inject Client ID
          echo "Injecting SIMKL_CLIENT_ID into credentials.py"
          # Use a different delimiter for sed in case the secret contains slashes
          sed -i "s|SIMKL_CLIENT_ID_PLACEHOLDER|${SIMKL_CLIENT_ID}|g" simkl_mps/credentials.py

          # Inject Client Secret
          echo "Injecting SIMKL_CLIENT_SECRET into credentials.py"
          sed -i "s|SIMKL_CLIENT_SECRET_PLACEHOLDER|${SIMKL_CLIENT_SECRET}|g" simkl_mps/credentials.py

          echo "✅ Credentials successfully injected into simkl_mps/credentials.py"

      - name: Check if package version exists on PyPI
        id: check_version
        continue-on-error: true
        run: |
          pip install requests
          python - <<EOF
          import requests
          import json
          version = "${{ inputs.version }}"
          package_name = "simkl-mps"
          
          try:
              response = requests.get(f"https://pypi.org/pypi/{package_name}/json")
              if response.status_code == 200:
                  data = response.json()
                  versions = list(data.get("releases", {}).keys())
                  if version in versions:
                      print(f"::warning::Version {version} already exists on PyPI")
                      print("::set-output name=exists::true")
                  else:
                      print(f"Version {version} does not exist on PyPI yet")
                      print("::set-output name=exists::false")
              else:
                  print(f"Package {package_name} not found on PyPI or API error")
                  print("::set-output name=exists::false")
          except Exception as e:
              print(f"Error checking PyPI version: {e}")
              print("::set-output name=exists::false")
          EOF
          
          # For GitHub Actions v2+
          echo "exists=$([ "${{ steps.check_version.outputs.exists }}" == "true" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: Build package
        run: poetry build
        env:
          VERSION: ${{ inputs.version }}

      - name: Upload Python package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 3

      - name: Publish to PyPI
        id: publish
        continue-on-error: true
        if: steps.check_version.outputs.exists != 'true'
        run: poetry publish
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}

      - name: Handle PyPI publish result
        run: |
          if [[ "${{ steps.check_version.outputs.exists }}" == "true" ]]; then
            echo "::warning::Package version ${{ inputs.version }} already exists on PyPI. Skipping publish but continuing workflow."
            echo "This is not considered a failure. Workflow will continue with existing PyPI package."
          elif [[ "${{ steps.publish.outcome }}" == "failure" ]]; then
            # Check if error message contains the specific "File already exists" message
            ERROR_LOG="${{ steps.publish.outputs.stderr }}"
            if [[ $ERROR_LOG == *"File already exists"* ]]; then
              echo "::warning::PyPI upload failed because the file already exists. Continuing workflow."
            else
              echo "::error::PyPI upload failed for an unexpected reason:"
              echo "$ERROR_LOG"
              exit 1
            fi
          else
            echo "✅ Successfully published to PyPI"
          fi
