name: Create GitHub Release

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
    secrets:
      RELEASE_TOKEN:
        required: true
      GPG_PUBLIC_KEY:
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write  # Required for provenance
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for tag verification

      - name: Verify signed tag
        env:
          GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }} 
        run: |
          echo "Verifying tag signature for v${{ inputs.version }}..."
          
          # Import GPG public key
          if [ -n "$GPG_PUBLIC_KEY" ]; then
            # Write the key to a file first to avoid shell interpretation issues
            echo "$GPG_PUBLIC_KEY" > /tmp/gpg_public_key.asc
            # Fix any potential line ending issues
            sed -i 's/\r$//' /tmp/gpg_public_key.asc
            # Make sure the key file has proper GPG armor headers
            if ! grep -q "^-----BEGIN PGP PUBLIC KEY BLOCK-----" /tmp/gpg_public_key.asc; then
              echo "-----BEGIN PGP PUBLIC KEY BLOCK-----" > /tmp/fixed_key.asc
              cat /tmp/gpg_public_key.asc >> /tmp/fixed_key.asc
              echo "-----END PGP PUBLIC KEY BLOCK-----" >> /tmp/fixed_key.asc
              mv /tmp/fixed_key.asc /tmp/gpg_public_key.asc
            fi
            # Import the key from the file
            gpg --batch --import /tmp/gpg_public_key.asc || echo "::warning::Failed to import GPG key, but continuing..."
            echo "GPG Public Key import attempted."
            echo "Available GPG keys:"
            gpg --list-keys # List keys for debugging
            # Clean up
            rm -f /tmp/gpg_public_key.asc
          else
            echo "::warning:: GPG_PUBLIC_KEY secret not found. Cannot import key for tag verification."
          fi
          
          # Check if tag exists in local repository
          if ! git tag -l "v${{ inputs.version }}" | grep -q "v${{ inputs.version }}"; then
            echo "Tag not found in local repository, attempting to fetch from remote..."
            # Fetch the specific tag without overwriting existing ones
            git fetch origin tag "v${{ inputs.version }}" --no-tags
          fi
          
          # Verify that the tag exists now
          if ! git tag -l "v${{ inputs.version }}" | grep -q "v${{ inputs.version }}"; then
            echo "::error::Tag v${{ inputs.version }} not found in both local and remote repositories!"
            exit 1
          fi
          
          # Attempt to verify the tag signature
          if git verify-tag "v${{ inputs.version }}" 2>&1 | grep -q "Good signature"; then
            echo "âœ… Tag v${{ inputs.version }} has a valid GPG signature!"
          else
            echo "::warning::Tag v${{ inputs.version }} is not GPG-signed or has an invalid signature."
            echo "For verified releases, please use a GPG-signed tag:"
            echo "  git tag -s v${{ inputs.version }} -m \"Release version ${{ inputs.version }}\""
            echo "  git push origin v${{ inputs.version }}"
            
            # Enforce signed tags for verified releases
            exit 1
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          
      - name: List downloaded artifacts
        run: |
          echo "All downloaded artifacts:"
          find release-artifacts -type f | sort
          
          # Show specific information for the Windows installer
          WINDOWS_INSTALLER=$(find release-artifacts/windows-installer -name "*.exe" | head -1)
          if [ -n "$WINDOWS_INSTALLER" ]; then
            echo "Found Windows installer: $WINDOWS_INSTALLER"
            ls -la "$WINDOWS_INSTALLER"
          else
            echo "Warning: No Windows installer found!"
          fi

      - name: Find Windows Installer # Corrected indentation
        id: find_installer
        run: |
          INSTALLER_PATH=$(find release-artifacts -name "MPSS_Setup_*.exe" -o -name "*.exe" | grep -i "setup" | head -1)
          if [ -z "$INSTALLER_PATH" ]; then
            INSTALLER_PATH=$(find release-artifacts -name "*.exe" | head -1)
          fi
          if [ -n "$INSTALLER_PATH" ] && [ -f "$INSTALLER_PATH" ]; then
            echo "Found installer: $INSTALLER_PATH"
            echo "path=$INSTALLER_PATH" >> $GITHUB_OUTPUT
          else
            echo "::error::Windows installer not found or not a valid file!"
            find release-artifacts -name "*.exe" || echo "No .exe files found"
            exit 1
          fi
      # Removed incorrect sigstore/gh-action-sigstore step
      - name: Install cosign # Corrected indentation
        uses: sigstore/cosign-installer@v3.4.0 # Use the same version as in build-verification.yml

      - name: Sign Windows Installer with Cosign # Corrected indentation
        id: sign_installer
        run: |
          INSTALLER_PATH="${{ steps.find_installer.outputs.path }}"
          echo "Signing $INSTALLER_PATH..."
          cosign sign-blob --yes "$INSTALLER_PATH" --output-signature "${INSTALLER_PATH}.sig"
          echo "Signature created at ${INSTALLER_PATH}.sig"
          echo "signature_path=${INSTALLER_PATH}.sig" >> $GITHUB_OUTPUT
          
      - name: Prepare verification information # Corrected indentation
        run: |
          # Ensure verification-artifacts directory exists
          mkdir -p verification-info
          
          # Copy verification artifacts to a directory
          cp -r release-artifacts/verification-artifacts/* verification-info/ || echo "No verification artifacts found"
          
          # Create verification readme
          cat > verification-info/README.md << EOF
          # Build Verification

          This release was built using GitHub Actions. You can verify the authenticity of this build using the information below.

          ## SHA256 Checksums

          The SHA256SUMS.txt file contains checksums for all files in this release. You can verify the checksums with:

          \`\`\`
          sha256sum -c SHA256SUMS.txt
          \`\`\`

          ## Signature Verification

          The checksums are signed using [Sigstore/cosign](https://github.com/sigstore/cosign). You can verify the signature with:

          \`\`\`
          cosign verify-blob --signature SHA256SUMS.txt.sig SHA256SUMS.txt
          \`\`\`

          ## Build Provenance

          This build was created by GitHub Actions workflow run #${{ github.run_number }} (ID: ${{ github.run_id }}).
          
          View the build: https://github.com/kavinthangavel/Media-Player-Scrobbler-for-Simkl/actions/runs/${{ github.run_id }}
          EOF

      - name: Setup GitHub CLI
        run: |
          gh --version || (
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          )
          
      - name: Create Release with Provenance
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          VERSION="${{ inputs.version }}"
          INSTALLER_PATH="${{ steps.find_installer.outputs.path }}" # Use path from previous step
          
          echo "Windows installer to upload: $INSTALLER_PATH"
          
          # Check if release already exists
          if gh release view "v$VERSION" &>/dev/null; then
            echo "Release v$VERSION already exists. Skipping creation but will upload artifacts."
          else
            # Create release with provenance, attaching the main artifact directly
            gh release create "v$VERSION" \
              "$INSTALLER_PATH" \
              --title "Release $VERSION" \
              --notes "# MPSS Release $VERSION

          ## Verification
          
          This release was built using GitHub Actions workflow run #${{ github.run_number }} (ID: ${{ github.run_id }}).
          You can verify the authenticity of this build by checking the SHA256 checksums and signature files included with this release.
          
          View the build: https://github.com/kavinthangavel/Media-Player-Scrobbler-for-Simkl/actions/runs/${{ github.run_id }}" \
              --generate-notes \
              --verify-tag \
              --discussion-category "Releases"
            echo "Release created and Windows installer attached."
          fi
          
          # Upload verification info (checksums, checksum sig)
          echo "Uploading verification artifacts from verification-info/ ..."
          find verification-info -type f | while read file; do
            echo "Uploading $file..."
            gh release upload "v$VERSION" "$file" --clobber
          done
          
          # Upload the installer signature
          INSTALLER_SIG_PATH="${{ steps.sign_installer.outputs.signature_path }}"
          if [ -f "$INSTALLER_SIG_PATH" ]; then
            echo "Uploading installer signature: $INSTALLER_SIG_PATH"
            gh release upload "v$VERSION" "$INSTALLER_SIG_PATH" --clobber
          else
            echo "::warning:: Installer signature file not found at $INSTALLER_SIG_PATH"
          fi
          echo "Verification artifacts uploaded."

          # The Windows installer is now attached during 'gh release create',
          # so the separate upload step below is removed.
          
          # Upload other installers if we have them (commented out for now)
          # MACOS_DMG=$(find release-artifacts/macos-installers -name "*.dmg" | head -1)
          # MACOS_PKG=$(find release-artifacts/macos-installers -name "*.pkg" | head -1)
          # LINUX_APPIMAGE=$(find release-artifacts/linux-installers -name "*.AppImage" | head -1)
          # LINUX_DEB=$(find release-artifacts/linux-installers -name "*.deb" | head -1)
          
          # if [ -n "$MACOS_DMG" ]; then
          #   gh release upload "v$VERSION" "$MACOS_DMG" --clobber
          # fi
          # if [ -n "$MACOS_PKG" ]; then
          #   gh release upload "v$VERSION" "$MACOS_PKG" --clobber
          # fi
          # if [ -n "$LINUX_APPIMAGE" ]; then
          #   gh release upload "v$VERSION" "$LINUX_APPIMAGE" --clobber
          # fi
          # if [ -n "$LINUX_DEB" ]; then
          #   gh release upload "v$VERSION" "$LINUX_DEB" --clobber
          # fi
          
      - name: Delete all workflow artifacts after release
        uses: geekyeggo/delete-artifact@v5
        with:
          name: '*'      