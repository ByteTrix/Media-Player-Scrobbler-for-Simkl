name: Create GitHub Release

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
    secrets:
      RELEASE_TOKEN:
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write  # Required for provenance
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          
      - name: List downloaded artifacts
        run: find release-artifacts -type f | sort

      - name: Prepare verification information
        run: |
          # Ensure verification-artifacts directory exists
          mkdir -p verification-info
          
          # Copy verification artifacts to a directory
          cp -r release-artifacts/verification-artifacts/* verification-info/ || echo "No verification artifacts found"
          
          # Create verification readme
          cat > verification-info/README.md << EOF
          # Build Verification

          This release was built using GitHub Actions. You can verify the authenticity of this build using the information below.

          ## SHA256 Checksums

          The SHA256SUMS.txt file contains checksums for all files in this release. You can verify the checksums with:

          \`\`\`
          sha256sum -c SHA256SUMS.txt
          \`\`\`

          ## Signature Verification

          The checksums are signed using [Sigstore/cosign](https://github.com/sigstore/cosign). You can verify the signature with:

          \`\`\`
          cosign verify-blob --signature SHA256SUMS.txt.sig SHA256SUMS.txt
          \`\`\`

          ## Build Provenance

          This build was created by GitHub Actions workflow run #${{ github.run_number }} (ID: ${{ github.run_id }}).
          
          View the build: https://github.com/kavinthangavel/Media-Player-Scrobbler-for-Simkl/actions/runs/${{ github.run_id }}
          EOF

      - name: Setup GitHub CLI
        run: |
          gh --version || (
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          )
          
      - name: Create Release with Provenance
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          VERSION="${{ inputs.version }}"
          
          # Find executable installer
          WINDOWS_INSTALLER=$(find release-artifacts/windows-installer -name "*.exe" | head -1)
          
          # Create release with provenance
          gh release create "v$VERSION" \
            --title "Release $VERSION" \
            --notes "# MPSS Release $VERSION

          ## Verification
            
          This release was built using GitHub Actions workflow run #${{ github.run_number }} (ID: ${{ github.run_id }}). 
          You can verify the authenticity of this build by checking the SHA256 checksums and signature files included with this release.
            
          View the build: https://github.com/kavinthangavel/Media-Player-Scrobbler-for-Simkl/actions/runs/${{ github.run_id }}" \
            --generate-notes \
            --discussion-category "Releases"
          
          # Upload verification info
          find verification-info -type f | while read file; do
            gh release upload "v$VERSION" "$file" --clobber
          done
          
          # Upload Windows installer with provenance
          if [ -n "$WINDOWS_INSTALLER" ]; then
            gh release upload "v$VERSION" "$WINDOWS_INSTALLER" --clobber
          fi
          
          # Upload other installers if we have them (commented out for now)
          # MACOS_DMG=$(find release-artifacts/macos-installers -name "*.dmg" | head -1)
          # MACOS_PKG=$(find release-artifacts/macos-installers -name "*.pkg" | head -1)
          # LINUX_APPIMAGE=$(find release-artifacts/linux-installers -name "*.AppImage" | head -1)
          # LINUX_DEB=$(find release-artifacts/linux-installers -name "*.deb" | head -1)
          
          # if [ -n "$MACOS_DMG" ]; then
          #   gh release upload "v$VERSION" "$MACOS_DMG" --clobber
          # fi
          # if [ -n "$MACOS_PKG" ]; then
          #   gh release upload "v$VERSION" "$MACOS_PKG" --clobber
          # fi
          # if [ -n "$LINUX_APPIMAGE" ]; then
          #   gh release upload "v$VERSION" "$LINUX_APPIMAGE" --clobber
          # fi
          # if [ -n "$LINUX_DEB" ]; then
          #   gh release upload "v$VERSION" "$LINUX_DEB" --clobber
          # fi
