name: Create GitHub Release

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
    secrets:
      RELEASE_TOKEN:
        required: true
      GPG_PUBLIC_KEY:
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify signed tag
        env:
          GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
        run: |
          echo "Verifying tag signature for v${{ inputs.version }}..."
          if [ -n "$GPG_PUBLIC_KEY" ]; then
            echo "$GPG_PUBLIC_KEY" > /tmp/gpg_public_key.asc
            sed -i 's/\r$//' /tmp/gpg_public_key.asc
            if ! grep -q "^-----BEGIN PGP PUBLIC KEY BLOCK-----" /tmp/gpg_public_key.asc; then
              echo "-----BEGIN PGP PUBLIC KEY BLOCK-----" > /tmp/fixed_key.asc
              cat /tmp/gpg_public_key.asc >> /tmp/fixed_key.asc
              echo "-----END PGP PUBLIC KEY BLOCK-----" >> /tmp/fixed_key.asc
              mv /tmp/fixed_key.asc /tmp/gpg_public_key.asc
            fi
            gpg --batch --import /tmp/gpg_public_key.asc || echo "::warning::Failed to import GPG key, but continuing..."
            echo "GPG Public Key import attempted."
            echo "Available GPG keys:"
            gpg --list-keys
            rm -f /tmp/gpg_public_key.asc
          else
            echo "::warning:: GPG_PUBLIC_KEY secret not found. Cannot import key for tag verification."
          fi
          if ! git tag -l "v${{ inputs.version }}" | grep -q "v${{ inputs.version }}"; then
            echo "Tag not found in local repository, attempting to fetch from remote..."
            git fetch origin tag "v${{ inputs.version }}" --no-tags
          fi
          if ! git tag -l "v${{ inputs.version }}" | grep -q "v${{ inputs.version }}"; then
            echo "::error::Tag v${{ inputs.version }} not found in both local and remote repositories!"
            exit 1
          fi
          if git verify-tag "v${{ inputs.version }}" 2>&1 | grep -q "Good signature"; then
            echo "âœ… Tag v${{ inputs.version }} has a valid GPG signature!"
          else
            echo "::warning::Tag v${{ inputs.version }} is not GPG-signed or has an invalid signature."
            echo "For verified releases, please use a GPG-signed tag:"
            echo "  git tag -s v${{ inputs.version }} -m \"Release version ${{ inputs.version }}\""
            echo "  git push origin v${{ inputs.version }}"
            exit 1
          fi

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Download SHA256 Hash Artifact
        uses: actions/download-artifact@v4
        with:
          name: sha256-hash
          path: ./

      - name: Read SHA256 Hash
        id: read_hash
        shell: pwsh
        run: |
          $hashPath = "./sha256_hash.txt"
          if (Test-Path $hashPath) {
            $hash = Get-Content -Path $hashPath -Raw
            echo "sha256_hash=$hash" >> $env:GITHUB_OUTPUT
            echo "Read hash: $hash"
          } else {
            echo "::error::SHA256 hash file not found at $hashPath"
            exit 1
          }

      - name: List downloaded artifacts
        run: |
          echo "All downloaded artifacts:"
          find release-artifacts -type f | sort
          WINDOWS_INSTALLER=$(find release-artifacts/windows-installer -name "*.exe" | head -1)
          if [ -n "$WINDOWS_INSTALLER" ]; then
            echo "Found Windows installer: $WINDOWS_INSTALLER"
            ls -la "$WINDOWS_INSTALLER"
          else
            echo "Warning: No Windows installer found!"
          fi

      - name: Find Windows Installer
        id: find_installer
        run: |
          INSTALLER_PATH=$(find release-artifacts -name "MPSS_Setup_*.exe" -o -name "*.exe" | grep -i "setup" | head -1)
          if [ -z "$INSTALLER_PATH" ]; then
            INSTALLER_PATH=$(find release-artifacts -name "*.exe" | head -1)
          fi
          if [ -n "$INSTALLER_PATH" ] && [ -f "$INSTALLER_PATH" ]; then
            echo "Found installer: $INSTALLER_PATH"
            echo "path=$INSTALLER_PATH" >> $GITHUB_OUTPUT
          else
            echo "::error::Windows installer not found or not a valid file!"
            find release-artifacts -name "*.exe" || echo "No .exe files found"
            exit 1
          fi

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Sign Windows Installer with Cosign
        id: sign_installer
        run: |
          INSTALLER_PATH="${{ steps.find_installer.outputs.path }}"
          echo "Signing $INSTALLER_PATH..."
          cosign sign-blob --yes "$INSTALLER_PATH" --output-signature "${INSTALLER_PATH}.sig"
          echo "Signature created at ${INSTALLER_PATH}.sig"
          echo "signature_path=${INSTALLER_PATH}.sig" >> $GITHUB_OUTPUT

      - name: Prepare verification information
        run: |
          mkdir -p verification-info
          cp -r release-artifacts/verification-artifacts/* verification-info/ || echo "No verification artifacts found"
          INSTALLER_PATH="${{ steps.find_installer.outputs.path }}"
          INSTALLER_FILENAME=$(basename "$INSTALLER_PATH")
          CERT_IDENTITY="https://github.com/${{ github.repository }}/.github/workflows/build.yml@refs/tags/v${{ inputs.version }}"
          CERT_ISSUER="https://token.actions.githubusercontent.com"
          cat > verification-info/README.md << EOF
          # Build Verification

          This release was built using GitHub Actions. You can verify the authenticity of this build using the information below.

          ## SHA256 Checksums

          The SHA256SUMS.txt file contains checksums for all files in this release. You can verify the checksums with:

          \`\`\`
          sha256sum -c SHA256SUMS.txt
          \`\`\`

          ## Signature Verification

          ### Checksum Signature

          The checksums file (\`SHA256SUMS.txt\`) is signed using [Sigstore/cosign](https://github.com/sigstore/cosign). You can verify its signature with:

          \`\`\`bash
          cosign verify-blob \
            --certificate-identity "$CERT_IDENTITY" \
            --certificate-oidc-issuer "$CERT_ISSUER" \
            --signature SHA256SUMS.txt.sig \
            SHA256SUMS.txt
          \`\`\`

          ### Executable Signature

          You can also verify the signature of the Windows executable file (\`$INSTALLER_FILENAME\`) directly:

          \`\`\`bash
          cosign verify-blob \
            --certificate-identity "$CERT_IDENTITY" \
            --certificate-oidc-issuer "$CERT_ISSUER" \
            --signature "${INSTALLER_FILENAME}.sig" \
            "$INSTALLER_FILENAME"
          \`\`\`

          These commands verify that the signature was created by the expected GitHub Actions workflow (`build.yml`) for this specific tag (`v${{ inputs.version }}`).

          ## Build Provenance

          This build was created by GitHub Actions workflow run #${{ github.run_number }} (ID: ${{ github.run_id }}).

          View the build: https://github.com/kavinthangavel/Media-Player-Scrobbler-for-Simkl/actions/runs/${{ github.run_id }}
          EOF

      - name: Setup GitHub CLI
        run: |
          gh --version || (
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          )

      - name: Create Release and Upload Initial Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          VERSION="${{ inputs.version }}"
          INSTALLER_PATH="${{ steps.find_installer.outputs.path }}"
          echo "Windows installer to upload: $INSTALLER_PATH"

          if gh release view "v$VERSION" &>/dev/null; then
            echo "Release v$VERSION already exists. Skipping creation but will upload artifacts."
          else
            gh release create "v$VERSION" \
              "$INSTALLER_PATH" \
              --title "Release $VERSION" \
              --generate-notes \
              --verify-tag \
              --discussion-category "Releases"
            echo "Release created and Windows installer attached."
          fi

          echo "Uploading verification artifacts from verification-info/ ..."
          find verification-info -type f | while read file; do
            echo "Uploading $file..."
            gh release upload "v$VERSION" "$file" --clobber
          done

          INSTALLER_SIG_PATH="${{ steps.sign_installer.outputs.signature_path }}"
          if [ -f "$INSTALLER_SIG_PATH" ]; then
            echo "Uploading installer signature: $INSTALLER_SIG_PATH"
            gh release upload "v$VERSION" "$INSTALLER_SIG_PATH" --clobber
          else
            echo "::warning:: Installer signature file not found at $INSTALLER_SIG_PATH"
          fi
          echo "Verification artifacts uploaded."

      - name: Update Release Body with SHA256 Hash
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          VERSION: ${{ inputs.version }}
          SHA256_HASH: ${{ steps.read_hash.outputs.sha256_hash }}
        shell: bash
        run: |
          echo "Fetching current release body for v${VERSION}..."
          EXISTING_BODY=$(gh release view "v$VERSION" --json body --jq .body)

          if [ -z "$SHA256_HASH" ]; then
            echo "::error::SHA256_HASH is empty. Cannot update release body."
            exit 1
          fi

          INSTALLER_BASENAME="MPSS_Setup_${VERSION}.exe"

          SHA_TABLE=$(cat <<EOF

          | File                     | SHA256                                   |
          | ------------------------ | ---------------------------------------- |
          | ${INSTALLER_BASENAME}    | ${SHA256_HASH}                           |
          EOF
          )

          echo "Appending SHA256 table to release body..."
          printf -v NEW_BODY "%s\n%s" "$EXISTING_BODY" "$SHA_TABLE"

          echo "Updating release v${VERSION}..."
          gh release edit "v$VERSION" --notes "$NEW_BODY"
          echo "Release body updated successfully."

      - name: Delete build artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            python-package