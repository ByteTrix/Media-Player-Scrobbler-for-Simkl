name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'mkdocs.yml' # Ignore docs config
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'mkdocs.yml' # Ignore docs config
  workflow_dispatch:

# Added top-level permissions for security best practices
permissions:
  contents: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    # permissions: # Permissions can be defined per job if needed, but top-level is often sufficient
    #   contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'poetry' # Use poetry cache
          # check-latest: true # Removed, can cause unexpected issues

      # Use snok/install-poetry action
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false

      - name: Install dependencies
        run: |
          # Ensure poetry.lock is up-to-date - This should ideally be handled by a separate dependency update workflow
          # poetry lock --check # Check if lock file is consistent
          # poetry config virtualenvs.create false # Config moved to poetry action
          # Install with dev dependencies, excluding the root package itself if it's not installable/needed for linting
          poetry install --with dev --no-interaction # --no-root removed as it might be needed depending on tools

      - name: Run linters
        run: |
          poetry run flake8 simkl_scrobbler --count --select=E9,F63,F7,F82 --show-source --statistics
          poetry run black --check simkl_scrobbler

  test:
    name: Test on ${{ matrix.os }} / Python ${{ matrix.python-version }}
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.11', '3.12'] # Keep versions as strings
        exclude:
          - os: macos-latest
            python-version: '3.9'

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry' # Use poetry cache

    # Use snok/install-poetry action
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: false

    - name: Install dependencies
      run: |
        # poetry config virtualenvs.create false # Config moved to poetry action
        poetry install --with dev --no-interaction

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y xdotool wmctrl

    # Renamed step for clarity
    - name: Run Tests (Placeholder)
      run: |
        echo "Skipping actual test execution for now."
        # poetry run pytest # Example: Uncomment and adapt when tests are ready

    - name: Upload coverage to Codecov
      # Ensure this runs only when tests actually produce coverage data
      # Condition updated to match the specific matrix entry intended for coverage
      if: success() && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4 # Updated action version
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # Use secrets for tokens
        fail_ci_if_error: false # Don't fail CI if Codecov upload fails
        verbose: true
      # Consider adding env: PYTEST_ADDOPTS: "--cov=simkl_scrobbler --cov-report=xml" to test step when enabling tests